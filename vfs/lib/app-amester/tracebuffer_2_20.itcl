#
# (C) Copyright IBM Corporation 2011, 2016
#

# tracebuffer_2_20 describes the tracebuffer found in AME API 2.20

class tracebuffer_2_20 {
    inherit tracebuffer

    #The ame component to which this object belongs
    public variable amec ""
    #The host to which this object belongs. Cached for convenience.
    public variable host ""

    #Name of object without "::"
    public variable objname ""

    # Methods
    public method debuginfo {}
    public method get_config {}
    public method set_config {sensor_field_list scom_list {sockets {}}}
    public method read {startbyte}
    public method start {}
    public method stop {}
    public method get_all_entries {}
    public method get_bytes {}

    # Internal methods (public for debugging)
    public method read_bytes {startbyte}
    public method download {}
    public method parse {}

    private variable scom_map

    constructor {parent args} {
        ::amesterdebug::debug ame "constructor for $this"
        #init name to object name (can be overridden by arg)
        regsub -all "::" $this "" objname
        set amec $parent
        set host [$parent cget -host]
        eval configure $args

    }

    destructor {
    }

    #User input
    protected variable tb_user_sensor_field_list {}
    protected variable tb_user_scom_list {}
    protected variable tb_user_sockets_bitmap -1

    #Server side state variables in TMPD firmware
    protected variable tb_size 0
    protected variable tb_entry_size 0
    protected variable tb_entry_n 0
    protected variable tb_oca_offset 0
    protected variable tb_write 0
    protected variable tb_read 0
    protected variable tb_sensors_n 0
    protected variable tb_oca_n 0
    protected variable tb_record 0
    protected variable tb_continuous 0
    protected variable tb_sensors_max 0
    protected variable tb_oca_max 0
    protected variable tb_chips_max 0

    #Derived state

    #Downloaded trace bytes
    protected variable tb_bytes {}
    #List of parsed entries
    protected variable tb_entries {}
}

body tracebuffer_2_20::debuginfo {} {
    ::amesterdebug::set tb 1
    get_config
    ::amesterdebug::set tb 0
}


body tracebuffer_2_20::get_config {} {
    set _result [$amec send_sync 3a 3c [binary format "H*" "3f"]]
    set _status [lindex $_result 0] 
    set _data [lindex $_result 1]

    set _n [binary scan $_data "IIIIIIIIccccSSc" _tb_bytes _tb_size _tb_entry_size _tb_entry_n _tb_oca_offset _tb_write _tb_write_oca _tb_read _tb_sensors_n _tb_oca_n _tb_record _tb_continuous _tb_sensors_max _tb_oca_max _tb_chips_max]
    ::amesterdebug::debug tb "got $_n fields"
    ::amesterdebug::debug tb [format "tb_bytes=0x%08x" $_tb_bytes] 
    ::amesterdebug::debug tb "size=$_tb_size"
    ::amesterdebug::debug tb "entry_size=$_tb_entry_size "
    ::amesterdebug::debug tb "entry_n=$_tb_entry_n "
    ::amesterdebug::debug tb "oca_offset=$_tb_oca_offset "
    ::amesterdebug::debug tb "tb_write=$_tb_write "
    ::amesterdebug::debug tb "write_oca=$_tb_write_oca "
    ::amesterdebug::debug tb "read=$_tb_read "
    ::amesterdebug::debug tb "sensors_n=$_tb_sensors_n "
    ::amesterdebug::debug tb "oca_n=$_tb_oca_n "
    ::amesterdebug::debug tb "record=$_tb_record "
    ::amesterdebug::debug tb "continuous=$_tb_continuous "
    ::amesterdebug::debug tb "sensors_max=$_tb_sensors_max"
    ::amesterdebug::debug tb "oca_max=$_tb_oca_max"
    ::amesterdebug::debug tb "chips_max=$_tb_chips_max"

    set tb_size $_tb_size
    set tb_entry_size $_tb_entry_size
    set tb_entry_n $_tb_entry_n
    set tb_oca_offset $_tb_oca_offset
    set tb_write $_tb_write
    set tb_read $_tb_read
    set tb_sensors_n $_tb_sensors_n
    set tb_oca_n $_tb_oca_n
    set tb_record $_tb_record
    set tb_continuous $_tb_continuous
    set tb_sensors_max $_tb_sensors_max
    set tb_oca_max $_tb_oca_max
    set tb_chips_max $_tb_chips_max
}

body tracebuffer_2_20::set_config {sensor_field_list scom_list {sockets {}}} {
    set sensor_count 0
    set scom_count 0
    set sensor_num_code {}
    set sensor_field_code {}
    set scom_codes {}
    #default: -1 selects all sockets = 0xffffffff
    set socket_bitmap -1  

    set tb_user_sensor_field_list $sensor_field_list
    set tb_user_scom_list $scom_list

    if {$sockets ne {}} {
	set socket_bitmap 0
	foreach s $sockets {
	    set socket_bitmap [expr $socket_bitmap | (1 << $s)]
	}
    }

    set tb_user_sockets_bitmap $socket_bitmap

    #Parse the user requested fields
    foreach t $sensor_field_list {
	#default is value field
	set f "value"
	switch [llength $t] {
	    1 {
		set s $t
	    }
	    2 {
		set s [lindex $t 0]
		set f [lindex $t 1]
	    }
	    default {
		return -code error "too many fields in $t"
	    }
	}
	
	set sobj [find object $s]
	if {$sobj eq ""} {
	    set sobj [$amec get sensorname $s]
	}
	if {$sobj eq ""} {
	    return -code error "unknown sensor $s"
	}

	set snum [$sobj cget -sensornum]

	switch $f {
	    value {set fnum 0}
	    min {set fnum 1}
	    max {set fnum 2}
	    acc {set fnum 3}
	    updates {set fnum 4}
       	    test {set fnum 5}
	    rcnt {set fnum 6}
	    default {return -code error "Unknown sensor field $f"}
	}
	incr sensor_count

	lappend sensor_num_code $snum 
	lappend sensor_field_code $fnum

    }

    foreach _s $scom_list {
	#Get address of scom.  Should be a hex string like "40020" for Time of Day SCOM.
	#if {[info exists scom_map($_s)]} {
	#    set _a $scom_map($_s)
	#} else {
	#    set _a $_s
	#}
	set _a $_s
	lappend scom_codes [expr 0x${_a}]
	incr scom_count
    }

    # Form IPMI message
    set msg_sensors [binary format "S${sensor_count}c${sensor_count}" $sensor_num_code $sensor_field_code]
    binary scan $msg_sensors "H*" all
    ::amesterdebug::debug tb "sensor msg = $all"

    set msg_scoms [binary format "I*" $scom_codes]
    binary scan $msg_scoms "H*" all
    ::amesterdebug::debug tb "scom msg = $all"

    set msg [binary format "H*SSIa*a*" "31" $sensor_count $scom_count $socket_bitmap $msg_sensors $msg_scoms]
    binary scan $msg "H*" all
    ::amesterdebug::debug tb "full msg = $all"

    set _result [$amec send_sync 3a 3c [binary format "H*SSIa*a*" "31" $sensor_count $scom_count $socket_bitmap $msg_sensors $msg_scoms]]

    #Read back the configuration to setup for download
    get_config

}

body tracebuffer_2_20::start {} {
    set _result [$amec send_sync 3a 3c [binary format "H*" "33"]]
}

body tracebuffer_2_20::stop {} {
    set _result [$amec send_sync 3a 3c [binary format "H*" "34"]]
}

body tracebuffer_2_20::read {startbyte} {
    set _result [$amec send_sync 3a 3c [binary format "H2I" "32" $startbyte]]
    binary scan [lindex $_result 1] "H*" all
    return $all
}

body tracebuffer_2_20::read_bytes {startbyte} {
    #returns a list
    #element 0: completion code
    #element 1: Binary string of bytes
    return [$amec send_sync 3a 3c [binary format "H2I" "32" $startbyte]]
}

#Internal routine to get the tracebuffer between the read and write pointers
#Note: it may download a few bytes beyond the end of the write pointer
body tracebuffer_2_20::download {} {
    set _firstbyte [expr $tb_entry_size * $tb_read]
    set _remaining [expr ($tb_write - $tb_read) * $tb_entry_size]
    set _bytesfetched 0

    #Clear out existing downloaded trace
    set tb_bytes {}

    while {$_remaining > 0} {
	set _r [read_bytes $_firstbyte]
	set _rc [lindex $_r 0]
	set _bytes [lindex $_r 1]

	if {$_rc} {
	    ::amesterdebug::debug tb "Error: $this downloading at byte=$_firstbyte"
	    return 1
	}

	set _len [string length $_bytes]
	if {$_len == 0} {
	    ::amesterdebug::debug tb "Error: $this downloading at byte=$_firstbyte. Got zero bytes"
	    return 1
	}

	append tb_bytes $_bytes

	incr _firstbyte $_len
	incr _bytesfetched $_len
	set _remaining [expr $_remaining - $_len]

	::amesterdebug::debug tb "$this: fetched=$_bytesfetched len=$_len remain=$_remaining"

    }
}


#Internal routine to parse downloaded bytes into trace entries
body tracebuffer_2_20::parse {} {
    set _len [string length $tb_bytes]
    set _ptr 0
    set tb_entries {}

    # Calculate how many SCOM fields in an entry
    set _socks_avail 0
    for {set _sock $tb_chips_max} {$_sock > 0} {incr _sock -1} {
	set _socks_avail [expr ($_socks_avail << 1) | 1]
    }
    ::amesterdebug::debug tb "sockets avail bitmap = $_socks_avail"
    set _socks_used_bitmap [expr $_socks_avail & $tb_user_sockets_bitmap]
    ::amesterdebug::debug tb "sockets used bitmap = $_socks_used_bitmap"
    set _sock_count 0
    while {$_socks_used_bitmap} {
	if {$_socks_used_bitmap & 1} {incr _sock_count}
	set _socks_used_bitmap [expr $_socks_used_bitmap >> 1]
    }
    ::amesterdebug::debug tb "socket count = $_sock_count"

    set _entries_n [expr $tb_write - $tb_read]
    set _entry_bytes [expr $_entries_n * $tb_entry_size]
    
    while {$_ptr < $_entry_bytes} {
	set _entry {}
	set _ptr_next [expr $_ptr + $tb_entry_size]
	
	foreach t $tb_user_sensor_field_list {
	    #default is value field
	    set f "value"
	    switch [llength $t] {
		1 {
		    set s $t
		}
		2 {
		    set s [lindex $t 0]
		    set f [lindex $t 1]
		}
		default {
		    return -code error "too many fields in $t"
		}
	    }
	    
	    set sobj [find object $s]
	    if {$sobj eq ""} {
	        set sobj [$amec get sensorname $s]
	    }
	    if {$sobj eq ""} {
	        return -code error "unknown sensor $s"
	    }
	    
	    #set snum [$sobj cget -sensornum]
	    
	    switch $f {
		value { 
		    set type "S"
		    set _size 2
		    binary scan $tb_bytes "@${_ptr}${type}" value
		    set sf [$sobj cget -scalefactor]
		    set finalvalue [expr $value * $sf]
		}
		min {
		    set type "S"
		    set mask "0x0ffff"
		    set _size 2
		    binary scan $tb_bytes "@${_ptr}${type}" value
		    set sf [$sobj cget -scalefactor]
		    set finalvalue [expr $value * $sf]
		}
		max {
		    set type "S"
		    set mask "0x0ffff"
		    set _size 2
		    binary scan $tb_bytes "@${_ptr}${type}" value
		    set sf [$sobj cget -scalefactor]
		    set finalvalue [expr $value * $sf]
		}
		acc {
		    set type "I"
		    set mask "0x0ffffffff"
		    set _size 4
		    binary scan $tb_bytes "@${_ptr}${type}" value
		    set sf [$sobj cget -scalefactor]
		    set finalvalue [expr $value * $sf]
		}
		updates {
		    set type "I"
		    set mask "0x0ffffffff"
		    set _size 4
		    binary scan $tb_bytes "@${_ptr}${type}" value
		    #Convert to unsigned
		    set finalvalue [expr $value & $mask]
		}
		test {
		    set type "S"
		    set mask "0x0ffff"
		    set _size 2
		    binary scan $tb_bytes "@${_ptr}${type}" value
		    set finalvalue $value
		}
		rcnt {
		    set type "I"
		    set mask "0x0ffffffff"
		    set _size 4
		    binary scan $tb_bytes "@${_ptr}${type}" value
		    #Convert to unsigned
		    set finalvalue [expr $value & $mask]
		}
		default {return -code error "Unknown sensor field $f"}
	    }
	    
	    lappend _entry $finalvalue
	    
	    incr _ptr $_size
	    
	}

	# Read SCOMS

	#set type "W"
	#set mask "0xffffffffffffffff"
	set _size 8
	foreach t $tb_user_scom_list {
	    for {set _sock 0} {$_sock < $_sock_count} {incr _sock} {
		binary scan $tb_bytes "@${_ptr}H16" value
		#Present as ASCII hex
		#set finalvalue [expr $value & $mask]
		lappend _entry $value
		incr _ptr $_size
	    }
	}

	lappend tb_entries $_entry
	
	#check pointer is OK.
	if {$_ptr != $_ptr_next} {
	    ::amesterdebug::debug 1 "$this: ptr=$_ptr but should be $_ptr_next"
	    return ""
	}
	
    }
}

body tracebuffer_2_20::get_all_entries {} {
    #get current config
    get_config
    #download bytes
    download
    #parse the bytes into entries
    parse
    return $tb_entries 
}

body tracebuffer_2_20::get_bytes {} {
    #get current config
    get_config
    #download bytes
    download
    return $tb_bytes
}
