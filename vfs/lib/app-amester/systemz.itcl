#
# (C) Copyright IBM Corporation 2011, 2016
#

#--------------------------------------------------------------------
#
# systemz host procedures
#
# Note: We connect using systemz+ and assume that user USERID can 
# connect with admin privelege and use unauthenticated, unencrypted
# packets.
#
#--------------------------------------------------------------------


if {$::options(gui)} {
    .mbar.file.menu.connect add command -label "System z..." -command "systemzconnect \#auto"
}
 
class systemzconnect {
    public variable name "myz"
    public variable addr ""
    public variable port 3623
    public variable close 1
    public variable window ""
    public variable timeout 30000

    public method make_gui {}
    public method connect {}

    constructor args {
	if {$::options(gui)} {make_gui}
    }

    destructor {
	#delete GUI
	if {$window ne ""} {
	    destroy $window
	}
    }

}

body systemzconnect::make_gui {} {

    if {[winfo exists $window]} {
	focus $window
	raise $window
	wm deiconify $window
	return
    }

    regsub -all "::" .systemzconnect_$this "" window

    toplevel $window
    wm title $window "Connect to System z"
    
    label $window.name_l -text "System name" -anchor w
    entry $window.name -textvariable [scope name]
    grid $window.name_l $window.name -sticky news -row 0

    label $window.addr_l -text "IP address" -anchor w
    entry $window.addr -textvariable [scope addr]
    grid $window.addr_l $window.addr -sticky news -row 1
    bind $window.addr <Return> [code $this connect]

    label $window.port_l -text "IP port" -anchor w
    entry $window.port -textvariable [scope port]
    grid $window.port_l $window.port -sticky news -row 2

    label $window.timeout_l -text "Timeout (ms)" -anchor w
    entry $window.timeout -textvariable [scope timeout]
    grid $window.timeout_l $window.timeout -sticky news -row 3

    checkbutton $window.close -text "Close this window after connecting" -variable [scope close]
    grid $window.close -row 6 -sticky w

    button $window.connect -text "Connect" -command [code $this connect] -background lightblue
    grid $window.connect -row 8 -sticky news
}

body systemzconnect::connect {} {
    set obj ""
    set result ""
    catch {$window.connect configure -state disabled}
    if {[catch {set obj [systemz ::$name -addr $addr -systemz_port $port -timeout $timeout]} result]} {
	puts "There was an error connecting: result = $result"
	bgerror $result
    } else {
	if {![$obj isa systemz]} {
	    puts "There was an error connecting: obj= $obj"
	} elseif {$close} {delete object $this}
    }
    catch {$window.connect configure -state normal}
}


 
class systemz {
    inherit host

    constructor {args} {
	::amesterdebug::debug systemz "systemz constructor for $this"
	eval configure $args
	if {$addr eq ""} {
	    return -code error "Missing a required parameter, -addr <IP address>"
	}

	if {$::options(gui)} {make_gui}

	# Get basic systemz info (Number of processors, VPD, etc.)
	#if {[catch {init} initresult]} {
	#    return -code error "Can't initialize systemz object: $initresult"
	#}
	systemz_open
	init

	if {$::options(gui)} {host_window_update a b c}
    }
    
    destructor {
	::amesterdebug::debug systemz "$this destructor"
	::amesterdebug::debug destructor "$this destructor"
	#FIXME: delete GUI associated with systemz
	#FIXME: delete all callbacks (bc holds them...)

	systemz_close
	

	# Cancel any pending afters
	after cancel $ipmi_health_after
	foreach amec $ameclist {
	    delete object $amec
	}
    }

    # Get basic info on systemz (initialization)
    public method init {}

    protected variable ithread ""
    protected method ipmi_thread_start {}

    #
    # Scope
    #
    protected method scope_make_window {}

    #Performance metrics for workload graphs
    protected variable perfmetric_latency 0
    protected variable perfmetric_throughput 0

    #GUI
    public method make_gui {}

    #Communication
    protected variable wait_send_sync
    protected variable wait_send_sync_databytes
    protected variable wait_send_sync_status
    public method ipmi_send_sync {rssa chan lun netfn cmd data {priority 1}}
    protected method ipmi_send_sync_callback {myuid status databytes}
    public method ipmi_send_sync_cache {rssa chan lun netfn cmd data {priority 1} {tag ""} } 
    public method ipmi_send {rssa chan lun netfn cmd data callback priority}
    protected variable ipmi_msgq {}
    protected variable inprogress
    protected variable inprogress_q {}
    public variable timeout 120000
    protected method ipmi_queue {rssa chan lun netfn cmd data {callback {}} {priority 1} {to {}} {position end}}
    protected method ipmi_dequeue {}
    public method systemz_process {}
    public method systemz_process_packet {packet}
    protected method ipmi_health {}
    public variable ipmi_health_period 10000 {ipmi_health}
    protected variable ipmi_health_after 0

    public variable systemz_status "disconnected"
    public variable systemz_sock 0
    public variable systemz_port 3623
    public variable systemz_open_after 0
    public method systemz_open {}
    public method systemz_close {}
    public method systemz_timeout {}
    protected method systemz_send {tag rssa chan lun netfn cmd data}

    #AME
    #List of AME Components on host
    protected variable ameclist {}
    public method get {what args}

    # Timing
    #Track time between sending messages out over network
    protected variable data_last_ipmideqlatency [clock clicks -millisecond]

    #IPMI
    public variable ipmi_cache_enable 1
    common ipmi_cache
    #NOTE: Use of "common ipmi_cache" requires that all ipmi commands using the ipmi_send_sync_cache command
    #put AME API firmware level in the "tag" input parameter so that systems using different firmware levels can
    #connected to at the same time without a cache collision.

}

body systemz::init {} {
    ::amesterdebug::debug systemz "init"

    ipmi_health
    
    set ameclist [ame::init_ame_objects $name]
    return     

}

body systemz::get {what args} {
    switch $what {
	ameclist {return $ameclist}
	amec {return [lindex $ameclist 0]}
	systemz_status {return $systemz_status}
	default {return -code error "unknown command for amec: $what $args"}
    }
}


body systemz::make_gui {} {
    ::amesterdebug::debug gui "systemz_make_host_window $name"

    # Add all sensor labels
    # These are the stats that are created as labels
    set host_label_list [list {name} {addr} {ameutilport} {link}]

    foreach {key}  $host_label_list  {
    	if {![info exists ::host_stats_anchor($key)]} {
    	    set anchor e
    	} else {
    	    set anchor $::host_stats_anchor($key)
    	}
    	host_window_add $name $key [label .host.c.f.${name}_${key} -textvariable [scope $key] -anchor $anchor -font $::fixedfont] $key
    }
}


#
# systemz Communication
#


# ipmi_send_sync
#
# This is a command to send an ipmi cmd to a systemz.
# This command waits for a response, prints it, then returns.

body systemz::ipmi_send_sync {rssa chan lun netfn cmd data {priority 1}} {
    set myuid [uid_create]
    set callback "ipmi_send_sync_callback $myuid \$status \$databytes"
    ipmi_queue $rssa $chan $lun $netfn $cmd $data $callback $priority
    # The "exists" check below is required since systemz can fake some responses and
    # set the vwait variable sooner than we can check it!
    if {![info exists ::wait_send_sync($myuid)]} {
	::vwait ::wait_send_sync($myuid)
    }
    #::vwait [scope wait_send_sync($myuid)]
    array unset wait_send_sync $myuid
    set status $wait_send_sync_status($myuid)
    set databytes $wait_send_sync_databytes($myuid)
#    set myname wait_send_sync_status($myuid)
#    eval set status $$myname
#    set myname wait_send_sync_databytes($myuid)
#    eval set databytes $$myname
    array unset wait_send_sync_status $myuid
    array unset wait_send_sync_databytes $myuid
    return [list $status $databytes]
}

body systemz::ipmi_send_sync_callback {myuid status databytes} {
    set wait_send_sync_status($myuid) $status
    set wait_send_sync_databytes($myuid) $databytes
    set ::wait_send_sync($myuid) 1
    #::amesterdebug::debug ipmi ">>($this) ipmi_send_sync_callback"
}

body systemz::ipmi_send_sync_cache {rssa chan lun netfn cmd data {priority 1} {tag ""} } {
    #Ignore channel and lun in cache. Assume all firmware instances on systemuse same AME API and AME version
    #set index [binary format "a*a*H2H2H2a*" $mtm $tag $rssa $netfn $cmd $data]
    #NOTE: System z SE does not have MTM info to send back.
    set index [binary format "a*H2H2H2a*" $tag $rssa $netfn $cmd $data]
    if {$ipmi_cache_enable && ![info exists ipmi_cache($index)]} {
	set ipmi_cache($index) [ipmi_send_sync $rssa $chan $lun $netfn $cmd $data $priority ]
    } else {
	#Print any debugging for results returned from cache
	if {[::amesterdebug::set ipmi]} {
	    binary scan $data "H*" all
	    ::amesterdebug::debug ipmi "IPMI cache query ($this): rssa=$rssa chan=$chan lun=$lun netfn=$netfn cmd=$cmd data_len=[string length $data] data=$all"
	    set status [lindex $ipmi_cache($index) 0]
	    set databytes [lindex $ipmi_cache($index) 1]
	    binary scan $databytes "H*" all
	    ::amesterdebug::debug ipmi "IPMI cache response ($this): status=$status data=$all"
	}
    }
    return $ipmi_cache($index)
}


body systemz::ipmi_send {rssa chan lun netfn cmd data callback priority} {
    ipmi_queue $rssa $chan $lun $netfn $cmd $data $callback $priority
}

# based on bc::net_send_msg
#
#
body systemz::ipmi_queue {rssa chan lun netfn cmd data {callback {}} {priority 1} {to {}} {position end}} {

    #Do we still need tags?
    set tag 0

    if {$to eq {}} {set to $timeout}

    set item [list $priority $tag $callback $to $rssa $chan $lun $netfn $cmd $data]
    set ipmi_msgq [linsert $ipmi_msgq $position $item]

    # sort message queue by priority
    # note: messages of the same priority remain in the same order.
    #   Therefore, inserting into the front or end of the msgq will add the
    #   message at the beginning or end of messages with the same priority.
    # 
    set ipmi_msgq [lsort -integer -index 0 $ipmi_msgq]

    # Process right away, if no messages are waiting
    if {[llength $ipmi_msgq] == 1} {
	ipmi_dequeue
    }    
}

# ipmi_dequeue
# This function checks if 1) we are ready to send out a message to the host
# and 2) there is a message waiting to be sent. If so, send it.
# If not, just return.
body systemz::ipmi_dequeue {} {
    ::amesterdebug::debug systemz "$this ipmi_dequeue"
    # Do not start new requests if network traffic is paused
    if {!$::network} {return}
    # Do nothing if we are waiting on a response from host.
    if {[llength $inprogress_q]} {return}
    # Do nothing if outgoing message queue is empty
    if {![llength $ipmi_msgq]} {
	return
    }
    # Do nothing if network is not connected. Health monitor with reconnect.
    if {$systemz_status ne "connected"} {
	::amesterdebug::debug systemz "ipmi_dequeue: not connected ($systemz_status)"
	return
    }

    set item [lindex $ipmi_msgq 0]
    set priority [lindex $item 0]
    set tag [lindex $item 1]
    set callback [lindex $item 2]
    set to [lindex $item 3]
    set rssa [lindex $item 4]
    set chan [lindex $item 5]
    set lun [lindex $item 6]
    set netfn [lindex $item 7]
    set cmd [lindex $item 8]
    set data [lindex $item 9]
    
    if {[info exists inprogress($tag,tag)]} {
	::amesterdebug::debug systemz "Message for $tag pending with same tag. ${netfn}${cmd}${data}"
	return
    }

    #::amesterdebug::debug systemz "dequeue: tag=$tag msg=${netfn}${cmd}${data}"
    set inprogress($tag,tag) $tag
    set inprogress($tag,priority) $priority
    set inprogress($tag,callback) $callback
    set inprogress($tag,timeout) $to
    set inprogress($tag,rssa) $rssa
    set inprogress($tag,chan) $chan
    set inprogress($tag,lun) $lun
    set inprogress($tag,netfn) $netfn
    set inprogress($tag,cmd) $cmd
    set inprogress($tag,data) $data
    lappend inprogress_q $tag

    set ipmi_msgq [lreplace $ipmi_msgq 0 0]

    if {$to != 0} {
	set inprogress($tag,after) [after $to [code $this systemz_timeout]]
	#::amesterdebug::debug after "after set $inprogress($tag,after) for $this"
    }
    
    systemz_send $tag $rssa $chan $lun $netfn $cmd $data

    ${name}_ipmimsgcount add_data 1
}


body systemz::systemz_send {tag rssa chan lun netfn cmd data} {
    set len [string length $data]
    if {[::amesterdebug::set ipmi]} {
	binary scan $data "H*" all
	::amesterdebug::debug ipmi "IPMI sent ($this): netfn=$netfn cmd=$cmd data=$all"
	::amesterdebug::debug ipmi "data length = $len bytes"
    }

    set outmsg [binary format "H2H2H2H2H2a*" $rssa $chan $lun $netfn $cmd $data] 
    binary scan $outmsg "H*" all
    ::amesterdebug::debug systemz "sending packet $all"
    if { $netfn == 6 && $cmd == 1 } {
        ::amesterdebug::debug ipmi "($this) Fake the IPMI response to get device ID"
	set inprogress($tag,start_time_ms) [clock clicks -milliseconds]
        systemz_process_packet [binary format H2a* 00 "hello amester"]
    } else { 
	# Send message on network
	if {[catch {puts -nonewline $systemz_sock $outmsg} result]} {
	    ::amesterdebug::debug systemz "($this) systemz_send error: failed socket write:  $result"
	} else {
	    # Success. Record number of bytes transmitted
	    ${name}_ipmibytestx add_data $len
	}
	 
	#Mark time when message is sent
	if {$tag ne {}} {
	    set now [clock clicks -millisecond]
	    set inprogress($tag,start_time_ms) $now
	    ${name}_ipmideqlatency add_data [expr $now - $data_last_ipmideqlatency]
	    set data_last_ipmideqlatency $now
	}
    }
}

body systemz::systemz_process {} {
    ::amesterdebug::debug systemz "$this systemz_process"
    set status ""
    set ipmi_databytes ""
    set result ""

    #if {[eof $systemz_sock] || [catch {set packet [read $systemz_sock ]} result]} 
    if {[catch {set packet [read $systemz_sock ]} result]} {
	::amesterdebug::debug systemz "systemz_process: can't read packet. result=$result"
	return
    } else {
	#Process the bytes read from the socket
	systemz_process_packet $packet
    }
}
   
body systemz::systemz_process_packet {packet} {
    set stop_time_ms [clock clicks -milliseconds]
    set callback ""

    # Read the inprogress data and clear it for next message

    set tag [lindex $inprogress_q 0]; #whatever it was when enqueued
    #record message latency
    if {![info exists inprogress($tag,tag)]} {
	::amesterdebug::debug 1 "WARN: $this systemz_process_packet received $tag, but no message was sent."
	binary scan $packet "H*" all
	::amesterdebug::debug 1 "      packet received: $all"
	exit
	return
    }
    set start_time_ms $inprogress($tag,start_time_ms)
    set callback $inprogress($tag,callback)
    after cancel $inprogress($tag,after)
    array unset inprogress "$tag,*"
    set inprogress_q [lreplace $inprogress_q 0 0]

    # Now all the inprogress data has been used. Can launch next command
    # and overlap callback processing with network latency of next command.

    ipmi_dequeue

    # Now that message has gone out, do long latency processing.
    ${name}_ipmimsglatency add_data [expr $stop_time_ms - $start_time_ms]

    set start_processing [clock clicks -milliseconds]

    set databytes {}
    set status {}

    binary scan $packet "ca*" status databytes 
    set len [string length $databytes]
    #Set useful data bytes received (not status)
    ${name}_ipmibytesrx add_data $len

    if {[::amesterdebug::set ipmi]} {
	binary scan $databytes "H*" all
	::amesterdebug::debug ipmi "IPMI received ($this): status=$status data=$all"
    }

    if {$callback ne {}} {
        ::amesterdebug::debug systemz "($this) systemz_process_packet callback=$callback"
        if {[catch [list eval $callback] result]} {
            ::amesterdebug::debug 1 "($this) systemz_process_packet error; failed executing callback $callback: $result"
	    binary scan $databytes "H*" all
	    ::amesterdebug::debug 1 "  status=$status databytes=$all"
        }
    }

    #Record time to process the message
    set now [clock clicks -milliseconds]
    ${name}_ipmiprocesslatency add_data [expr $now - $start_processing]

}

body systemz::systemz_timeout {} {
    ::amesterdebug::debug health "$this timeout"
    systemz_close
    systemz_open
    return
}

body systemz::systemz_close {} {
    ::amesterdebug::debug systemz "systemz_close"
    set link "down"
    set code [catch {close $systemz_sock}]
    set systemz_status "closed"
    if {$systemz_sock == 0} {return}

    #Delete timers
    after cancel $systemz_open_after
    foreach timer [array names inprogress *,after] {
	after cancel $inprogress($timer)
    }

    #Delete inprogress queue (since socket is closed, no more
    #messages can return
    set inprogress_q {}

    # remove storage for this sock and repost all callback messages
    foreach index [array names inprogress *,tag] {
	#Get message that failed
	set tag $inprogress($index)
	set priority $inprogress($tag,priority)
	set callback $inprogress($tag,callback)
	set to $inprogress($tag,timeout)
	set rssa $inprogress($tag,rssa)
	set chan $inprogress($tag,chan)
	set lun $inprogress($tag,lun)
	set netfn $inprogress($tag,netfn)
	set cmd $inprogress($tag,cmd)
	set data $inprogress($tag,data)
	#remove message from inprogress array
	array unset inprogress "$tag,*"
	#Sending message will also reopen the connection
	ipmi_queue $rssa $chan $lun $netfn $cmd $data $callback $priority $to 0
    }

    set systemz_sock 0 
    
}

body systemz::systemz_open {} {
    ::amesterdebug::debug systemz "systemz_open $this"
    set result {}

    # Done if a socket already exists or is opening
    if {$systemz_sock != 0 || $systemz_status eq "opening"} {return}; 

    if {[catch {set systemz_sock [socket $addr $systemz_port]} result]} {
	::amesterdebug::debug systemz "($this) systemz_open; failed to open socket: $result"
	return
    }
    fconfigure $systemz_sock -buffering none -blocking 0 -translation binary
    ::amesterdebug::debug systemz [fconfigure $systemz_sock]

    fileevent $systemz_sock w {}
    fileevent $systemz_sock r [code $this systemz_process]

    #Assume the connection is connected. No "opening" state like POWER NETC.
    #set systemz_status "opening"
    #set systemz_open_after [after $timeout [code $this systemz_timeout]]

    set systemz_status "connected"
    set link "up"

}


body systemz::ipmi_health {} {
    ::amesterdebug::debug systemz "ipmi_health $name $systemz_status"

    after cancel $ipmi_health_after

    if {$ipmi_health_period} {
	set ipmi_health_after [after $ipmi_health_period [code $this ipmi_health]]
    } else {
	return
    }

    switch -- $systemz_status {
	"disconnected" {
            ::amesterdebug::debug netchealth "($this) Channel is disconnected, opening"
	    systemz_open
	}
	"opening" {
            ::amesterdebug::debug netchealth "($this) Channel is opening, please wait"
	}
	"connected" {
            ::amesterdebug::debug netchealth "($this) Channel is connected, dispatching"
	    ipmi_dequeue
	}
	"timeout" {
            ::amesterdebug::debug netchealth "($this) Channel timed out, closing"
	    systemz_close
	}
	"error" {
            ::amesterdebug::debug netchealth "($this) Channel error, closing"
	    systemz_close
	}
	"closed" {
            ::amesterdebug::debug netchealth "($this) Channel closed, attempting to open"
	    # Try to re-open host
	    systemz_open
	}
	default {
	    ::amesterdebug::debug systemz "Error: undefined status $systemz_status for $name"
	}
    }

}


