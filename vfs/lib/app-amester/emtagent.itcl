#
# (C) Copyright IBM Corporation 2011, 2016
#


#--------------------------------------------------------------------
#
# Localhost host procedures
#
#--------------------------------------------------------------------


 
class emtagent {
    inherit host

    #Parameters
    protected variable vpdversion ""
    protected variable mtm ""
    protected variable model ""
    protected variable serial ""
    protected variable assetid ""

    protected variable macaddr1 ""
    protected variable macaddr2 ""
    protected variable macaddr3 ""
    protected variable macaddr4 ""

    #Port to connect to EMT agent
    public variable agentport 1413

    #Network connection
    protected variable agent_sock 0
    protected variable agent_status "disconnected"
    protected variable agent_link "down"

    protected variable agent_msgq {}
    public variable agent_health_period 5000 {agent_health}
    protected variable agent_health_after 0

    protected method agent_health {}
    protected method agent_open {}
    protected method agent_open_callback {}
    protected method agent_open_timeout {}
    protected method agent_close {}
    protected method agent_write_msg {}
    protected method agent_process_msg {}
    protected method agent_msg_timeout {tag}
    public method agent_send_msg {msg {tag {}} {callback {}} {priority 1} {timeout {10000}} {position end}}

    protected variable priority_highest 0
    protected variable priority_default 1
    protected variable priority_cmd 2
    protected variable priority_data 3

    protected variable tagid 0

    constructor {args} {
	::amesterdebug::debug emtagent "emtagent constructor for $this"
	eval configure $args
	
	if {$addr eq ""} {
	    return -code error "Missing a required parameter, -addr <IP address>"
	}

	if {$::options(gui)} {make_gui}

	# Get basic emtagent info (Number of processors, VPD, etc.)
	if {[catch {init} initresult]} {
	    return -code error "Can't initialize emtagent object: $initresult"
	}

	if {$::options(gui)} {host_window_update a b c}

    }
    
    destructor {
	::amesterdebug::debug emtagent "$this destructor"
	#FIXME: delete GUI associated with emtagent
	#FIXME: delete all callbacks (bc holds them...)

	# Cancel any pending afters
	after cancel $ipmi_health_after
    }

    # Get basic info on emtagent (initialization)
    public method init {}

    #
    # Scope
    #
    protected method scope_make_window {}

    #Performance metrics for workload graphs
    protected variable perfmetric_latency 0
    protected variable perfmetric_throughput 0

    #GUI
    public method make_gui {}

    #Communication
    public variable ipmicmd ""
    protected variable wait_send_sync
    protected variable wait_send_sync_databytes
    protected variable wait_send_sync_status
    public method ipmi_send_sync {rssa chan lun netfn cmd data {priority 1}}
    protected method ipmi_send_sync_callback {myuid status databytes}
    public method ipmi_send_sync_cache {rssa chan lun netfn cmd data {priority 1} {tag ""}}
    public method ipmi_send {rssa chan lun netfn cmd data callback priority}
    public variable ipmi_msgq {}
    protected variable inprogress
    protected method ipmi_queue {rssa chan lun netfn cmd data {callback {}} {priority 1} {timeout {10000}} {position end}}
    protected method ipmi_dequeue {}
    public method ipmi_process {tag result}
    protected method ipmi_health {}
    protected variable ipmi_health_period 5000
    protected variable ipmi_health_after 0

    #AME
    #List of AME Components on host
    protected variable ameclist {}
    public method get {what args}

}

body emtagent::init {} {
    ::amesterdebug::debug emtagent "init"
    #ipmi_thread_start
    agent_health
    ipmi_health
    set ameclist [ame::init_ame_objects $name]
}


body emtagent::make_gui {} {
    ::amesterdebug::debug gui "emtagent_make_host_window $name"

    # Add all sensor labels
    # These are the stats that are created as labels
    set host_label_list [list {name} {addr} {agentport} {agent_link} {vpdversion} {mtm} {model} {serial} {assetid} {macaddr1} {macaddr2} {macaddr3} {macaddr4}]

    foreach {key}  $host_label_list  {
    	if {![info exists ::host_stats_anchor($key)]} {
    	    set anchor e
    	} else {
    	    set anchor $::host_stats_anchor($key)
    	}
    	host_window_add $name $key [label .host.c.f.${name}_${key} -textvariable [scope $key] -anchor $anchor -font $::fixedfont] $key
    }

}





#
# Emtagent Communication
#


# ipmi_send_sync
#
# This is a command to send an ipmi cmd to a emtagent.
# This command waits for a response, prints it, then returns.

body emtagent::ipmi_send_sync {rssa chan lun netfn cmd data {priority 1}} {
    ::amesterdebug::debug emtagent "ipmi_send_sync $rssa $chan $lun $netfn $cmd"
    set myuid [uid_create]
    set callback "[code $this ipmi_send_sync_callback] $myuid \$status \$databytes"
    ipmi_queue $rssa $chan $lun $netfn $cmd $data $callback $priority
    ::amesterdebug::debug emtagent "emtagent ipmi_send_sync wait on $myuid [info exists tk_version] [info exists tcl_service]"
    if {[info exists tk_version] || [info exists tcl_service]} {
	::amesterdebug::debug vwait "$this Something is wrong! [info exists tk_version] [info exists tcl_service]"
    }
    ::amesterdebug::debug vwait "vwait on [scope wait_send_sync($myuid)]"
    set wait_send_sync($myuid) 0
    #vwait ::emtagent_wait_sent_sync_$myuid
    ::vwait [scope wait_send_sync($myuid)]
    ::amesterdebug::debug vwait "done vwait $myuid"
    array unset wait_send_sync $myuid
    #unset ::emtagent_wait_sent_sync_$myuid
    set myname wait_send_sync_status($myuid)
    eval set status $$myname
    set myname wait_send_sync_databytes($myuid)
    eval set databytes $$myname
    array unset wait_send_sync_status $myuid
    array unset wait_send_sync_databytes $myuid
    #::amesterdebug::debug emtagent "send_sync return"
    return [list $status $databytes]
}

body emtagent::ipmi_send_sync_callback {myuid status databytes} {
    set names [array names wait_send_sync]
    set len [llength $names]
    if {$len != 1} {
	::amesterdebug::debug vwait "*** *** *** emtagent ipmi_send_sync_callback $myuid names=$names len=$len "
    }
    set wait_send_sync_status($myuid) $status
    set wait_send_sync_databytes($myuid) $databytes
    set [scope wait_send_sync($myuid)] 1
    #set ::emtagent_wait_sent_sync_$myuid 1
    ::amesterdebug::debug vwait "emtagent just set [scope wait_send_sync($myuid)]"
}

body emtagent::ipmi_send_sync_cache {rssa chan lun netfn cmd data {priority 1} {tag ""}} {
    return [ipmi_send_sync $rssa $chan $lun $netfn $cmd $data $priority]
}

body emtagent::ipmi_send {rssa chan lun netfn cmd data callback priority} {
    ipmi_queue $rssa $chan $lun $netfn $cmd $data $callback $priority
}

# based on bc::net_send_msg
#
#
body emtagent::ipmi_queue {rssa chan lun netfn cmd data {callback {}} {priority 1} {timeout {10000}} {position end}} {
    ::amesterdebug::debug emtagent "$this ipmi_queue"
    #Do we still need tags
    set tag $name

    set item [list $priority $tag $callback $timeout $rssa $chan $lun $netfn $cmd $data]
    set ipmi_msgq [linsert $ipmi_msgq $position $item]
    if {[llength $ipmi_msgq] == 1} {
	ipmi_dequeue
    }    
}

# based on bc::net_write_msg
#
#
body emtagent::ipmi_dequeue {} {
    ::amesterdebug::debug emtagent "$this ipmi_dequeue"
    if {![llength $ipmi_msgq]} {
	return
    }
    # sort message queue by priority
    # note: messages of the same priority remain in the same order.
    #   Therefore, inserting into the front or end of the msgq will add the
    #   message at the beginning or end of messages with the same priority.
    # 
    set ipmi_msgq [lsort -integer -index 0 $ipmi_msgq]

    set item [lindex $ipmi_msgq 0]
    set priority [lindex $item 0]
    set tag [lindex $item 1]
    set callback [lindex $item 2]
    set timeout [lindex $item 3]
    set rssa [lindex $item 4]
    set chan [lindex $item 5]
    set lun [lindex $item 6]
    set netfn [lindex $item 7]
    set cmd [lindex $item 8]
    set data [lindex $item 9]
    
    if {[info exists inprogress($tag,tag)]} {
	::amesterdebug::debug emtagent "Message for $tag pending with same tag. ${netfn}${cmd}${data}"
	return
    }

    ::amesterdebug::debug emtagent "dequeue: tag=$tag msg=${netfn}${cmd}${data}"
    set inprogress($tag,tag) $tag
    set inprogress($tag,priority) $priority
    set inprogress($tag,callback) $callback
    set inprogress($tag,timeout) $timeout
    set inprogress($tag,rssa) $rssa
    set inprogress($tag,chan) $chan
    set inprogress($tag,lun) $lun
    set inprogress($tag,netfn) $netfn
    set inprogress($tag,cmd) $cmd
    set inprogress($tag,data) $data

    set databytes ""
    set i 0
    binary scan $data "H*" ascii
    set len [string length $ascii]
    for {set i 0} {$i < $len} {incr i 2} {
	lappend databytes [string range $ascii $i [expr $i+1]]
    }
    

    set ipmimsg [concat $rssa $netfn $lun $cmd $databytes]
    ::amesterdebug::debug emtagent "  ipmimsg = $ipmimsg"

    set ipmi_msgq [lreplace $ipmi_msgq 0 0]
    set msg "me ipmicmd $ipmimsg"
    set callback "[code $this ipmi_process] $tag"
    #puts "msg=$msg"
    agent_send_msg $msg {} $callback

}

body emtagent::ipmi_process {tag result} {
    ::amesterdebug::debug emtagent "$this ipmi_process tag=$tag result=$result"
    set status ""
    set ipmi_databytes ""

    if {$result eq ""} {
	#Error in processing IPMI command. OSA's ipmicmd failed. Got nothing back. This can happen if ipmicmd is run at too quickly back-to-back.
	#Policy: repost it
	set priority $inprogress($tag,priority)
	set callback $inprogress($tag,callback)
	set timeout $inprogress($tag,timeout)
	set rssa $inprogress($tag,rssa)
	set chan $inprogress($tag,chan)
	set lun $inprogress($tag,lun)
	set netfn $inprogress($tag,netfn)
	set cmd $inprogress($tag,cmd)
	set data $inprogress($tag,data)
	array unset inprogress "$tag,*"
	ipmi_queue $rssa $chan $lun $netfn $cmd $data $callback $priority
	return
    }

    set status [lindex $result 0]
    set databytes [binary format "H*" [lindex $result 1]]

    if {![info exists inprogress($tag,callback)]} {
	return
	return -code error "$this ipmi_process received reply without message"
	# Error: received reply without a message
    } else {
	set callback $inprogress($tag,callback)

	if {[info exists inprogress($tag,after)]} {
	    set after $inprogress($tag,after)
	    after cancel $after
	    ::amesterdebug::debug emtagent "cancel $after"
	}

	::amesterdebug::debug emtagent "$this ipmi_process callback=$callback"
	if {[catch {eval $callback} result]} {
	    ::amesterdebug::debug 1 "ERROR while executing callback= $callback\n  result = $result"
	}
	array unset inprogress "$tag,*"
    }

    ipmi_dequeue
}

body emtagent::ipmi_health {} {
    ipmi_dequeue
    set ipmi_health_after [after $ipmi_health_period [code $this ipmi_health]]
}




body emtagent::get {what args} {
    switch $what {
	ameclist {return $ameclist}
	amec {return [lindex $ameclist 0]}
	macaddr1 {return $macaddr1}
	macaddr2 {return $macaddr2}
	macaddr3 {return $macaddr3}
	macaddr4 {return $macaddr4}
	agent_link { return $agent_link}
	agent_status {return $agent_status}
	default {return -code error "unknown command for amec: $what $args"}
    }
    
}



#--------------------------------------------------------------------
#
# Host network procedures
# This connects to ameutil running in-band on host host
#
#--------------------------------------------------------------------

#
# Wakeup every $net_health_period and check the status of one host
#
# FIXME: check when last data packet came in.  If over threshold, ping the AME Client with a command...it will timeout if something is wrong.
#
# NOTE: same as bc::net_health
body emtagent::agent_health {} {

    ::amesterdebug::debug emtagent "$this agent_health"
    after cancel $agent_health_after

    # reschedule
    if {$agent_health_period} {
	set agent_health_after [after $agent_health_period [code $this agent_health]]
    } else {
	return
    }
    
    switch -- $agent_status {
	"disconnected" {
	    agent_open
	}
	"opening" {
	    #::amesterdebug::debug emtagentnet "bcnet_health $name opening"
	}
	"connected" {
	    if {[llength $agent_msgq] > 0} {
		agent_write_msg
	    }
	}
	"timeout" {
	    # disconnect
	    agent_close
	}
	"error" {
	    agent_close
	}
	"closed" {
	    # Try to re-open host
	    agent_open
	}
	default {
	    ::amesterdebug::debug emtagentnet "Error: undefined status $agent_status for $name"
	}
    }
    
}


body emtagent::agent_open {} {
    ::amesterdebug::debug emtagentnet "$this agent_open"

    # There may be no IP address associated with this host yet.
    if {$addr eq "none"} {return}

    set timeout_open_host 5000

    set agent_sock [socket -async $addr $agentport]
    ::amesterdebug::debug emtagentnet "agent_sock = $agent_sock port=$agentport"
    #Init all the socket's variables
    set ::sockinfo($agent_sock,name) $name
    set ::sockinfo($agent_sock,after_timeout) 0

    #init sock
    set agent_status "opening"
    ::amesterdebug::debug emtagentnet "$this opening"
    fconfigure $agent_sock -buffering line -blocking no
    set ::sockinfo($agent_sock,after_timeout) [after $timeout_open_host [code $this agent_open_timeout]]
    ::amesterdebug::debug emtagentnet "after set $::sockinfo($agent_sock,after_timeout) for agent_open_timeout"
    fileevent $agent_sock r [code $this agent_open_callback]

    ::amesterdebug::debug emtagentnet "Open socket $agent_sock for $name"

    return $agent_sock
}

body emtagent::agent_open_timeout {} {
    ::amesterdebug::debug emtagentnet "agent_open_timeout $name"
    set agent_status "timeout"
}

body emtagent::agent_open_callback {} {
    ::amesterdebug::debug emtagentnet "$this agent_open_callback"
    after cancel $::sockinfo($agent_sock,after_timeout)

    if {[fconfigure $agent_sock -error] ne ""} {
	::amesterdebug::debug emtagentnet "there was an error opening $agent_sock"
	agent_close
	return
    }
    if {[eof $agent_sock]} {
	agent_close
	return
    }

    set agent_status "connected"
    set agent_link "up"
    fileevent $agent_sock w {}
    fileevent $agent_sock r [code $this agent_process_msg]

    # if there are pending messages, start sending them.
    if {[llength $agent_msgq]} {
	agent_write_msg
    }
    return 0
}

body emtagent::agent_close {} {
    ::amesterdebug::debug emtagentnet "$this agent_close"
    #Attempt to close. May already be closed, so catch result.
    set code [catch {close $agent_sock}]
    set agent_status "closed"
    set agent_link "down"

    if {$agent_sock == 0} {return}

    #Delete timers
    after cancel $::sockinfo($agent_sock,after_timeout)
    foreach timer [array names ::sockcallback $agent_sock,*,after] {
	after cancel $::sockcallback($timer)
    }

    # remove storage for this sock and repost all callback messages
    #
    # NOTE: this is borrowed from BC. Blades normally don't repost. And leave all message in callback alone.  This is assuming that disconnection occurs during a long running benchmark, for example.
    foreach index [array names ::netsockcallback $agent_sock,*,tag] {
	set tag $::netsockcallback($index)
	#Get message that failed
	set msg $::netsockcallback($agent_sock,$tag,msg)
	set callback $::netsockcallback($agent_sock,$tag,callback)
	set timeout $::netsockcallback($agent_sock,$tag,timeout)
	set priority $::netsockcallback($agent_sock,$tag,priority)
	#Clear netsockcallback
	::amesterdebug::debug emtagentnet "$this agent_close clear netsockcallback $agent_sock,$tag"
	array unset ::netsockcallback "$agent_sock,$tag,*"
	#Sending message will also reopen the connection
	agent_send_msg $msg $tag $callback $priority $timeout 0
    }

    #Delete socket stats.
    array unset ::sockinfo $agent_sock,*
    set agent_sock 0
}

body emtagent::agent_msg_timeout {tag} {
    ::amesterdebug::debug emtagentnet "$this agent_msg_timeout"
    # For debugging
    if {$agent_sock != 0} {
	set name $::sockinfo($agent_sock,name)
	set msg $::sockcallback($agent_sock,$tag,msg)
	set callback $::sockcallback($agent_sock,$tag,callback)
	set priority $::sockcallback($agent_sock,$tag,priority)
	set after $::sockcallback($agent_sock,$tag,after)    
	::amesterdebug::debug emtagentnet "ERROR timeout $after sending message $msg to $name"
    }

    agent_close
    return    
}


# Get next message on queue and actually send it to the host
# Set timeout for it
body emtagent::agent_write_msg {} {
    ::amesterdebug::debug emtagentnet "$this emtagent agent_write_msg"
    if {!$::network} {
	::amesterdebug::debug emtagentnet "agent_write_msg: no network"
	return
    }
    if {![llength $agent_msgq]} {
	::amesterdebug::debug emtagentnet "agent_write_msg: nothing in agent_msgq"
	return
    }    
    if {$agent_status ne "connected"} {
	::amesterdebug::debug emtagentnet "agent_write_msg: not connected ($agent_status)"
	return
    }

    # sort message queue by priority
    # note: messages of the same priority remain in the same order.
    #   Therefore, inserting into the front or end of the agent_msgq will add the
    #   message at the beginning or end of messages with the same priority.
    # 
    set agent_msgq [lsort -integer -index 0 $agent_msgq]

    set item [lindex $agent_msgq 0]
    set priority [lindex $item 0]
    set tag [lindex $item 1]
    set callback [lindex $item 2]
    set timeout [lindex $item 3]
    set msg [lindex $item 4]

#    set item [lindex $agent_msgq 0]
#    set tag [lindex $item 0]
#    set callback [lindex $item 1]
#    set keep [lindex $item 2]
#    set timeout [lindex $item 3]
#    set msg [lindex $item 4]

    if {[info exists ::sockcallback($agent_sock,$tag,msg)]} {
	#There is already a message with the same tag.
	#Must wait until it finishes before posting this message
	#(Will try again when current message finishes)
	::amesterdebug::debug emtagentnet "Message on sock=$agent_sock pending with same tag=$tag"
	::amesterdebug::debug emtagentnet "  message = $msg"
	return
    }

    ::amesterdebug::debug emtagentnet "agent_write_msg: tag=$tag callback=$callback priority=$priority timeout=$timeout msg=$msg"
    set ::sockcallback($agent_sock,$tag,tag) $tag
    set ::sockcallback($agent_sock,$tag,msg) $msg
    set ::sockcallback($agent_sock,$tag,callback) $callback
    set ::sockcallback($agent_sock,$tag,timeout) $timeout
    set ::sockcallback($agent_sock,$tag,priority) $priority

    #remove from outgoing message queue
    set agent_msgq [lreplace $agent_msgq 0 0]
    #::amesterdebug::debug emtagentnet "sending $::sockinfo($agent_sock,name): $msg"
    
    if {[eof $agent_sock] || [catch {puts $agent_sock [list $tag $msg]} result]} {
	agent_close
	::amesterdebug::debug emtagentnet "$this we closed $name while in agent_write_msg (msg=$msg) result=$result"
    } else {
	#::amesterdebug::debug "$this sent $msg"
	if {$timeout != 0} {
	    set ::sockcallback($agent_sock,$tag,after) [after $timeout [code $this agent_msg_timeout $tag]]
	    ::amesterdebug::debug emtagentnet "after set $::sockcallback($agent_sock,$tag,after) for agent_msg_timeout"
	}
    }
}


#
# parameters must be lists. except name
#   default timeout: 10 seconds
#
body emtagent::agent_send_msg {msg {tag {}} {callback {}} {priority 1} {timeout {10000}} {position end}} {
    ::amesterdebug::debug hostsendmsg "$this agent_send_msg"
    ::amesterdebug::debug hostsendmsg " name=$name"
    ::amesterdebug::debug hostsendmsg " msg=$msg"
    ::amesterdebug::debug hostsendmsg " tag=$tag"
    ::amesterdebug::debug hostsendmsg " callback=$callback"
    ::amesterdebug::debug hostsendmsg " priority=$priority"
    ::amesterdebug::debug hostsendmsg " timeout=$timeout"

    if {!$::network} {return}

    if {$tag eq {}} {
	::amesterdebug::debug emtagentnet "tag is nothing"
	set tag "tag${tagid}"
	incr tagid
    }

    set item [list $priority $tag $callback $timeout $msg]
    set agent_msgq [linsert $agent_msgq $position $item ]

    if {[llength $agent_msgq] == 1} {
	agent_write_msg
    }
    ::amesterdebug::debug emtagentnet "$this agent_msgq has [llength $agent_msgq] items"
}

#
# This procedure is called when a server sends a message to amester
# 
# The message is a list:
# 1st word: the name of the command to which it is responding
# remaining words: the response
#
body emtagent::agent_process_msg {} {
    if {$::pause} {return}

    ::amesterdebug::debug emtagentnet "$this agent_process_msg"

    if {[fconfigure $agent_sock -error] ne ""} {
	::amesterdebug::debug emtagentnet "there was an error reading $agent_sock"
	agent_close
	return
    }

    if {[eof $agent_sock] || [catch {gets $agent_sock line}]} {
	::amesterdebug::debug emtagentnet "host closed $name"
	agent_close
	return
    } 

    if {!$::network} {return}

    ::amesterdebug::debug emtagentnet "msg from $name: $line"
    
    set tag [lindex $line 0]
    set reply [lindex $line 1]
    ::amesterdebug::debug emtagentnet "agent_process_msg: tag=$tag reply=$reply"

    if {[string match "\#" $tag]} {
	#comment message
	::amesterdebug::debug emtagentnet "$name: $reply"
    } elseif {![info exists ::sockcallback($agent_sock,$tag,callback)]} {
	# Error: received reply without a message
	::amesterdebug::debug 1 "ERROR: No message for this ameutil reply sock=$agent_sock name=$name reply=$reply tag=$tag line=$line"
	return
    } else {
    
	set msg $::sockcallback($agent_sock,$tag,msg)
	set callback $::sockcallback($agent_sock,$tag,callback)
	set timeout $::sockcallback($agent_sock,$tag,timeout)

	if {[info exists ::sockcallback($agent_sock,$tag,after)]} {
	    set after $::sockcallback($agent_sock,$tag,after)
	    after cancel $after
	    ::amesterdebug::debug emtagentnet "cancel $after"
	}

	# NOTE: callback may use variables: name, reply, tag, keep,
	# after as parameters that will be filled in by the eval
	# command.  #

	::amesterdebug::debug emtagentnet "evaluating callback=$callback"
	if {[catch {eval $callback [list $reply]} _result]} {
	    ::amesterdebug::debug 1 "ERROR while executing callback= $callback $reply\n  result = $_result"
	}
	::amesterdebug::debug emtagentnet "$this process_msg clear netsockcallback $agent_sock,$tag"
	array unset ::netsockcallback "$agent_sock,$tag,*"
    }

    # Send next message, if there is one
    agent_write_msg
}
